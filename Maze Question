Problem: Finding a Path in a Maze using Depth-First Search (DFS)

You are given a 2D grid representing a maze where:

- `0` represents an open space (you can walk here).
- `1` represents a wall (you cannot walk here).

You need to write a program using Depth-First Search (DFS) to determine if there is a path from a given start point to a goal point in the maze.

Input:

- `maze`: A 2D list `maze` of size `m x n` where each element is either `0` (open space) or `1` (wall).
- `start_x`, `start_y`: The coordinates of the start position `(start_x, start_y)` (0-based indices).
- `goal_x`, `goal_y`: The coordinates of the goal position `(goal_x, goal_y)` (0-based indices).

Output:

- Return `True` if there is a path from the start position to the goal position, otherwise return `False`.

Constraints:

- `1 ≤ m, n ≤ 100` (The size of the maze can be as large as `100x100`).
- The start position and the goal position will always be inside the maze.
- You cannot move outside the maze, and you cannot walk through walls (`1`).
]

Example 1:

maze = [
    [0, 1, 0],
    [0, 1, 0],
    [0, 0, 0]
]
start_x, start_y = 0, 0
goal_x, goal_y = 2, 2
print(find_path(maze, start_x, start_y, goal_x, goal_y))  # Output: True


Explanation: There is a simple path from `(0, 0)` to `(2, 2)` through the open spaces.

 Example 2:

maze = [
    [0, 1, 1],
    [1, 1, 1],
    [1, 1, 0]
]
start_x, start_y = 0, 0
goal_x, goal_y = 2, 2
print(find_path(maze, start_x, start_y, goal_x, goal_y))  # Output: False

Explanation: The maze is completely blocked, and no path exists from `(0, 0)` to `(2, 2)`.

Example 3:

maze = [
    [0, 1, 0, 0],
    [0, 1, 0, 1],
    [0, 0, 0, 0],
    [1, 1, 1, 0]
]
start_x, start_y = 0, 0
goal_x, goal_y = 3, 3
print(find_path(maze, start_x, start_y, goal_x, goal_y))  # Output: True

Explanation: There is a path from `(0, 0)` to `(3, 3)`, but it involves backtracking due to a dead-end in the maze.

Example 4 (Edge Case):

maze = [
    [0]
]
start_x, start_y = 0, 0
goal_x, goal_y = 0, 0
print(find_path(maze, start_x, start_y, goal_x, goal_y))  # Output: True

Explanation: The start and goal are the same, so the path is trivially found.
