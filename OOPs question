You need to create a base class called Warrior, and then create specific warrior types such as Rama, Lakshmana, and Hanuman that inherit from it. Implement method overriding and appropriate dunder methods to give the classes rich behavior.

Requirements
Base Class: Warrior
  Attributes: name, power, weapon
  Method: attack() – prints a generic attack message.
  Dunder Method: __str__() – returns a formatted string with warrior details.
  Dunder Method: __eq__() – two warriors are considered equal if they have the same power and weapon.
Derived Class: Rama
  Overrides attack() method – specific to Rama’s style (e.g., uses a bow).
  Add a method lead_battle() – prints Rama leading the army.
  Derived Class: Lakshmana
  Overrides attack() method – specific to Lakshmana’s style.
  Add a method protect_rama() – prints Lakshmana protecting Rama.
Derived Class: Hanuman
  Overrides attack() method – specific to Hanuman’s style (e.g., with strength).
  Add a method fly() – prints that Hanuman is flying to Lanka.
Write a small script to:
Instantiate each character.
Print them using print().
Compare two warriors using ==.
Call their unique methods and overridden attack() methods.In the Ramayan universe, you are asked to model a simple simulation of warriors using object-oriented programming in Python
You need to create a base class called Warrior, and then create specific warrior types such as Rama, Lakshmana, and Hanuman that inherit from it. Implement method overriding and appropriate dunder methods to give the classes rich behavior.
Requirements
Base Class: Warrior
  Attributes: name, power, weapon
  Method: attack() – prints a generic attack message.
  Dunder Method: __str__() – returns a formatted string with warrior details.
  Dunder Method: __eq__() – two warriors are considered equal if they have the same power and weapon.
Derived Class: Rama
  Overrides attack() method – specific to Rama’s style (e.g., uses a bow).
  Add a method lead_battle() – prints Rama leading the army.
Derived Class: Lakshmana
  Overrides attack() method – specific to Lakshmana’s style.
  Add a method protect_rama() – prints Lakshmana protecting Rama.
Derived Class: Hanuman
  Overrides attack() method – specific to Hanuman’s style (e.g., with strength).
  Add a method fly() – prints that Hanuman is flying to Lanka.


rama = Rama("Rama", 95, "Bow")
lakshmana = Lakshmana("Lakshmana", 90, "Sword")
hanuman = Hanuman("Hanuman", 99, "Gada")

print(rama)  # Uses __str__
print(lakshmana)
print(hanuman)

rama.attack()          # Overridden method
lakshmana.attack()
hanuman.attack()

rama.lead_battle()
lakshmana.protect_rama()
hanuman.fly()

# Equality check
print(rama == lakshmana)  # False
print(rama == Warrior("Archer", 95, "Bow"))  # True due to same power and weapon

Write a small script to:
Instantiate each character.
Print them using print().
Compare two warriors using ==.
Call their unique methods and overridden attack() methods.
